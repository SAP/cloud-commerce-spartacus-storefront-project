on:
  push:
    branches:
      - develop
      - epic/**
      - release/**
      - integration-libs/**
  pull_request:
    types: [opened, synchronize]
env:
  CYPRESS_KEY: ${{ secrets.CYPRESS_KEY }}
  NODE_VERSION: '16'
  TEST_RUN_E2E: 

# concurrency: 
#   group: ${{ github.head_ref || github.run_id }}
#   cancel-in-progress: true

name: Spartacus build pipeline
jobs:
  validate_e2e_execution:
    name: Validate pull_request files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Determine whether to run e2es
        id: save-e2e-output-result
        run: |         
          source ci-scripts/validate-e2e-execution.sh
          echo "::set-output name=OUTPUTS_RUN_E2E::$(echo $RUN_E2E)"
          echo "TEST_RUN_E2E=$(echo $RUN_E2E)" >> $GITHUB_ENV
      - name: test from other step
        run: |
          echo "${{ steps.save-e2e-output-result.outputs.OUTPUTS_RUN_E2E }}"
          echo "test"
          echo "$TEST_RUN_E2E"
          echo "${{ env.TEST_RUN_E2E }}"
  no_retries: 
    needs: validate_e2e_execution
    env:
      TEST_RUN_E2E: ${{ needs.validate_e2e_execution.outputs.OUTPUTS_RUN_E2E }}
    name: Verify retries
    runs-on: ubuntu-latest
    steps:
      - name: test from other job
        run: |
          echo "${{ needs.validate_e2e_execution.outputs.OUTPUTS_RUN_E2E }}"
          echo "test"
          echo "$TEST_RUN_E2E"
          echo "${{ env.TEST_RUN_E2E }}"
      - name: Forcefully fail build if retried
        uses: actions/github-script@v5
        with:
          script: |
            core.setFailed('Please push a commit to trigger the build. To push an empty commit you can use `git commit --allow-empty -m "Trigger Build"`') 
        if: ${{ github.run_attempt > 1 }}
  # unit_tests_core:
  #   needs: [no_retries]
  #   name: Unit tests for core Spartacus libs
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #     - name: Cache node_modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: | 
  #           node_modules
  #           projects/storefrontapp-e2e-cypress/node_modules
  #           ~/.cache/Cypress
  #         key: nodemodules-${{ github.event.pull_request.base.sha }}
  #         restore-keys: nodemodules-${{ github.event.pull_request.base.sha }}
  #     - name: Install angular CLI
  #       run: npm install -g @angular/cli
  #     - name: Package installation
  #       run: yarn --frozen-lockfile
  #     - name: Run unit tests for Spartacus libs
  #       run: |
  #         ci-scripts/unit-tests-core-lib.sh
  # unit_tests_libs:
  #   needs: [no_retries]
  #   name: Unit tests for integration libs
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #     - name: Cache node_modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: | 
  #           node_modules
  #           projects/storefrontapp-e2e-cypress/node_modules
  #           ~/.cache/Cypress
  #         key: nodemodules-${{ github.event.pull_request.base.sha }}
  #         restore-keys: nodemodules-${{ github.event.pull_request.base.sha }}
  #     - name: Install angular CLI
  #       run: npm install -g @angular/cli
  #     - name: Package installation
  #       run: yarn --frozen-lockfile
  #     - name: Run unit tests for integration libs
  #       run: |
  #         ci-scripts/unit-tests.sh
  # linting:
  #   needs: [no_retries]
  #   name: Validation checks
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #     - name: Cache node_modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: | 
  #           node_modules
  #           projects/storefrontapp-e2e-cypress/node_modules
  #           ~/.cache/Cypress
  #         key: nodemodules-${{ github.event.pull_request.base.sha }}
  #         restore-keys: nodemodules-${{ github.event.pull_request.base.sha }}
  #     - name: Install angular CLI
  #       run: npm install -g @angular/cli
  #     - name: Package installation
  #       run: yarn --frozen-lockfile
  #     - name: Run linting validation
  #       run: |
  #         ci-scripts/validate-lint.sh
  # b2c_e2e_tests:
  #   needs: [no_retries]
  #   name: E2E tests for B2C
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       containers: [1, 2, 3, 4, 5]
  #   if: needs.validate_e2e_execution.outputs.run_e2e == true
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Cache node_modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: | 
  #           node_modules
  #           projects/storefrontapp-e2e-cypress/node_modules
  #           ~/.cache/Cypress
  #         key: nodemodules-${{ github.event.pull_request.base.sha }}
  #         restore-keys: nodemodules-${{ github.event.pull_request.base.sha }}
  #     - name: Run e2es
  #       env: 
  #         SPA_ENV: ci,b2c
  #       run: |
  #         ci-scripts/e2e-cypress.sh
  # b2c_ssr_e2e_tests:
  #   needs: [no_retries]
  #   name: E2E tests for SSR B2C
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Cache node_modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: | 
  #           node_modules
  #           projects/storefrontapp-e2e-cypress/node_modules
  #           ~/.cache/Cypress
  #         key: nodemodules-${{ github.event.pull_request.base.sha }}
  #         restore-keys: nodemodules-${{ github.event.pull_request.base.sha }}
  #     - name: Run e2es
  #       if: env.RUN_E2E == 'true'
  #       run: |
  #         ci-scripts/e2e-cypress.sh --ssr
  # b2b_e2e_tests:
  #   needs: [no_retries]
  #   name: E2E tests for B2B
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       containers: [1, 2]
  #   if: needs.validate_e2e_execution.outputs.run_e2e == 'true'
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Cache node_modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: | 
  #           node_modules
  #           projects/storefrontapp-e2e-cypress/node_modules
  #           ~/.cache/Cypress
  #         key: nodemodules-${{ github.event.pull_request.base.sha }}
  #         restore-keys: nodemodules-${{ github.event.pull_request.base.sha }}
  #     - name: test from other step
  #       run: |
  #         echo ${{ needs.validate_e2e_execution.outputs.run_e2e }}

  #         if ${{ env.RUN_e2e == 'true'}}; then
  #           echo "something"
  #         else
  #           echo "nope"
  #         fi

  #         if [ env.RUN_e2e == 'true' ]; then
  #           echo "something2"
  #         else
  #           echo "nope2"
  #         fi

  #         if [ "$RUN_e2e" == 'true' ]; then
  #           echo "something3"
  #         else
  #           echo "nope3"
  #         fi

  #         if [ "$RUN_e2e" = true ]; then
  #           echo "something4"
  #         else
  #           echo "nope4"
  #         fi
  #     - name: Run e2es
  #       env:
  #         SPA_ENV: ci,b2b
  #       run: |     
  #         ci-scripts/e2e-cypress.sh -s b2b
  # build_conclusion:
  #   needs: [no_retries, unit_tests_core, unit_tests_libs, linting, b2c_e2e_tests, b2c_ssr_e2e_tests, b2b_e2e_tests]
  #   name: Build Conclusion
  #   runs-on: ubuntu-latest
  #   if: ${{ always() }}
  #   steps:
  #     - name: Required build failed
  #       uses: actions/github-script@v5
  #       with:
  #         script: |
  #           core.setFailed('Build failed')
  #       if: |
  #         needs.no_retries.result == 'failure' || needs.no_retries.result == 'cancelled' || needs.no_retries.result == 'skipped' ||
  #         needs.unit_tests_core.result == 'failure' || needs.unit_tests_core.result == 'cancelled' || needs.unit_tests_core.result == 'skipped' ||
  #         needs.unit_tests_libs.result == 'failure' || needs.unit_tests_libs.result == 'cancelled' || needs.unit_tests_libs.result == 'skipped' ||
  #         needs.linting.result == 'failure' || needs.linting.result == 'cancelled' || needs.linting.result == 'skipped' ||
  #         needs.b2c_e2e_tests.result == 'failure' || needs.b2c_e2e_tests.result == 'cancelled' || needs.b2c_e2e_tests.result == 'skipped' ||
  #         needs.b2c_ssr_e2e_tests.result == 'failure' || needs.b2c_ssr_e2e_tests.result == 'cancelled' || needs.b2c_ssr_e2e_tests.result == 'skipped' || 
  #         needs.b2b_e2e_tests.result == 'failure' || needs.b2b_e2e_tests.result == 'cancelled' || needs.b2b_e2e_tests.result == 'skipped'
  # send_slack_message:
  #   needs: build_conclusion
  #   name: Slack message for failed develop CI build in Spartacus
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     # TODO with slack actions for only develop
  #     - name: Send Slack message when build conclusion failed
  #       run: |
  #         echo test
  #       if: |
  #         needs.no_retries.result == 'failure' || 
  #         needs.no_retries.result == 'cancelled' || 
  #         needs.no_retries.result == 'skipped'