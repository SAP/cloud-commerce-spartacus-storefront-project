@import 'theme';
@import 'functions';
@import 'mixins';

//header color variables
$y-header-background-color: 'dark' !default;
$y-header-color: 'inverse' !default;
$y-header-separator-color: 'secondary' !default;

//header variables
$y-header-skipper-position: absolute !default;
$y-header-trbl-margin: 0 auto !default;
$y-header-bar-height: none !default;
$y-header-separator-position: absolute !default;
$y-header-separator-position-top: 43px !default;
$y-header-separator-position-left: 0 !default;
$y-header-separator-border-width: 1px !default;
$y-header-separator-width: 100vw !default;

:host {
  @include reset;
  @include var-color('background-color', $y-header-background-color);
  @include var-color('color', $y-header-color);
}

.y-header {
  margin: $y-header-trbl-margin;
  max-height: $y-header-bar-height;
  overflow: visible;
  @include media-breakpoint-up(lg) {
    @include make-container-max-widths;
    &:before {
      content: '';
      position: $y-header-separator-position;
      border-bottom-style: solid;
      border-bottom-width: $y-header-separator-border-width;
      @include var-color('border-bottom-color', $y-header-separator-color);
      width: $y-header-separator-width;
      left: $y-header-separator-position-left;
      top: $y-header-separator-position-top;
    }
  }
}
/**
  Introduce the beauty of CSS vars here. 
  The container specifies highly generic CSS vars.
  The nested components can use those CSS vars. 
  Out of the context of .site-logo the CSS vars
  can be used for different purposes. 
  With this setup, a customer can override the width with:
  .site-logo img { --margin: 100%; }
*/
.site-logo {
  --width: 35%;

  @include media-breakpoint-down(md) {
    --margin: 0 0 0 5rem;
  }
  @include media-breakpoint-down(md) {
    --width: 30%;
  }
  @include media-breakpoint-down(xs) {
    --width: 25%;
  }
}
