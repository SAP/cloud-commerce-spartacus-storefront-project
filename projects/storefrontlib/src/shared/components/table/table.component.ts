import {
  ChangeDetectionStrategy,
  Component,
  EventEmitter,
  HostBinding,
  Input,
  isDevMode,
  Output,
} from '@angular/core';
import { TableRendererService } from './table-renderer.service';
import {
  Table,
  TableDataOutletContext,
  TableHeader,
  TableHeaderOutletContext,
} from './table.model';

/**
 * The table component provides a generic DOM structure based on the `dataset` input.
 * The `Table` dataset contains a type, table structure and table data.
 *
 * The table component only supports horizontal table structure.
 *
 * The implementation is fairly "dumb" and only provides the following features:
 * - Use outlet for table headers (`<th>`) and cells (`<td>`).
 * - Localizing table headers, using the `I18nModule`.
 * - Add CSS classes on each cell to
 *
 * Al features are optional.
 *
 * By default, the headers and columns are rendered with an outlet template. The template
 * reference is generated by concatenating the table `type` and table header `key`.
 * The following snippet shows an outlet generated for a table header, for the table type
 * "cost-center" with a label "name":
 *
 * ```
 * <th>
 *   <template cxOutlet="tbl.cost-center.header.name">
 *   </template>
 * </th>
 * ```
 *
 * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.
 *
 * This allows components to further customize the table rendering. More over, customers can
 * customize the header and data by using the generated outlets.
 */
@Component({
  selector: 'cx-table',
  templateUrl: './table.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class TableComponent {
  @HostBinding('attr.__cx-table-type') tableType: string;

  protected _dataset: Table;
  @Input()
  set dataset(dataset: Table) {
    this._dataset = dataset;
    this.rendererService.add(dataset);
    this.addTableDebugInfo();
  }

  get dataset(): Table {
    return this._dataset;
  }

  /**
   * If the suffix is true, the table gets a suffix column.
   *
   * The suffix columns can be used to store actions, which are not
   * pure data properties.
   */
  @Input() suffix: boolean;

  /**
   * Provides a mechanism to compare a matching value for each item.
   *
   * The `property` refers to the dataset.value property, and the value tot the
   * matching property value.
   */
  @Input() currentItem: { value: any; property: string };

  constructor(protected rendererService: TableRendererService) {}

  /**
   * The paginateEvent is triggered when a new page is required. This includes sorting.
   */
  @Output() sortEvent: EventEmitter<string> = new EventEmitter();

  /**
   * Returns the static label for the given field, if available.
   */
  sort(header: TableHeader) {
    if (header.sortCode) {
      this.sortEvent.emit(header.sortCode);
    }
  }

  /**
   * Indicates whether the given item is the current item.
   *
   * The current item is driven by the `currentItem`, that holds a
   * property and value to compare.
   */
  isCurrentItem(item: any): boolean {
    if (!this.currentItem || !this.currentItem.value) {
      return;
    }
    return this.currentItem?.value === item?.[this.currentItem?.property];
  }

  /**
   * Returns the header (th) outlet reference for the given field.
   */
  getHeaderOutletRef(field: string): string {
    return this.rendererService.getHeaderOutletRef(this.type, field);
  }

  /**
   * Returns the header (th) outlet context for the given field.
   */
  getHeaderOutletContext(field: string): TableHeaderOutletContext {
    return this.rendererService.getHeaderOutletContext(
      this.type,
      this.options,
      field
    );
  }

  /**
   * Returns the data (td) outlet reference for the given field.
   */
  getDataOutletRef(field: string): string {
    return this.rendererService.getDataOutletRef(this.type, field);
  }

  /**
   * Returns the data (td) outlet context for the given field.
   */
  getDataOutletContext(field: string, data: any): TableDataOutletContext {
    return this.rendererService.getDataOutletContext(
      this.type,
      this.options,
      field,
      data
    );
  }

  /**
   * Generates the table type into the UI in devMode, so that developers
   * can easily get the notion of the table type.
   */
  protected addTableDebugInfo() {
    if (isDevMode && this.type) {
      this.tableType = this.type;
    }
  }

  protected get type() {
    return this.dataset?.structure?.type;
  }

  protected get options() {
    return this.dataset?.structure?.options;
  }
}
