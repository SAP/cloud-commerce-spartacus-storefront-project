/*
    The split-view can be used to add multiple associated views in a single view. This UX pattern is convenient
    if you navigate through items, and want to go into more detail or related information without leaving the
    initial view. Instead of navigating through "pages", the split view hosts child views. The child views can be
    static view elements, or dynamic created element, i.e. route driven.

    To offer maximum flexibility on the number of child views that be visualized at the same time, the maximum number
    of views is controlled by a CSS property. This allows to differ the number per breakpoint or even component, as CSS
    properties cascade.
    The  default (global) max views for a split view on tablet or higher is 2, where as we use 1 view on mobile.

    The 2nd CSS property that is used to split views, is the `--cx-last-visible-view`. This property is set by the
    component logic and indicates the deepest view that is visible. When the visibility of views are toggled, the
    `--cx-last-visible-view` is set accordingly.
  */

:root {
  @include media-breakpoint-down(md) {
    --cx-max-views: 1;
  }
  @include media-breakpoint-up(md) {
    --cx-max-views: 2;
  }

  /**
   * Hide all split views by default.
   */
  --cx-last-visible-view: 1;
}

%cx-split-view {
  display: flex;
  align-items: stretch;

  max-width: 100vw;

  --cx-view-flex: calc(
    (100% / min(var(--cx-last-visible-view), var(--cx-max-views)))
  );

  @include media-breakpoint-up(md) {
    padding: 0 var(--cx-spatial-base);
  }

  cx-view {
    width: 100%;
    height: 100%;
    @include media-breakpoint-up(md) {
      padding: 0 var(--cx-spatial-base);
    }

    transition: 0.3s;
    transition-timing-function: ease-in;

    flex: 1 0
      calc((100% / min(var(--cx-last-visible-view), var(--cx-max-views))));

    &[position='0'] {
      // we hide the first cx-view based on the visible position, as we can't rely on
      // overflow-x to hide the view.
      // temp-calc is an intermediate variable introduced as a workaround to CSSNano issues with Angular 9
      --temp-calc: calc(var(--cx-last-visible-view) - var(--cx-max-views));
      opacity: calc(1 - var(--temp-calc));

      // The inline start margin of the first flex item decreases to move
      // the flex items outside the flex container.
      margin-inline-start: calc(
        max(var(--cx-last-visible-view) - var(--cx-max-views), 0) *
          (var(--cx-view-flex) * -1)
      );
    }
  }
}
