$cxDefaultFlags: ();
$cxFlags: ();

/* 
USAGE:
1. DEFINING A FLAG

- IN THE LIBRARIES - set specific defaults:
  @include setDefaultFlag('feature1', true);
  @include setDefaultFlag('feature2', false);

- IN OUR STOREFRONTAPP - all true:
  @include setDefaultFlag('feature1', true);
  @include setDefaultFlag('feature2', true);

- IN CUSTOMER'S APP - customer decides:
  @include setFlag('feature1', true);
  @include setFlag('feature2', false);


2. USING A FLAG
```
  h1 {
    color: red;

    @if getFlag('feature2') {
      color: blue;
    }
}
```
*/

/**
 * Function to set the value of a feature flag. Should be used in custom apps.
 * @param $flag-name - the name of the flag
 * @param $value - the value of the flag
 */
@mixin setFlag($flag-name, $value) {
  $cxFlags: map-merge(
    $cxFlags,
    (
      $flag-name: $value,
    )
  ) !global;
}

/**
 * Function to set the default value of a feature flag. Should be used in libraries.
 * @param $flag-name - the name of the flag
 * @param $value - the default value of the flag
 */
@mixin setDefaultFlag($flag-name, $value) {
  $cxDefaultFlags: map-merge(
    $cxDefaultFlags,
    (
      $flag-name: $value,
    )
  ) !global;
}

/**
 * Function to get the value of a feature flag.
 * @param $flag-name - the name of the flag
 * @return - the value of the flag
 */
@function getFlag($flag-name) {
  $flag-value: map-get($cxFlags, $flag-name);
  @if $flag-value == null {
    $flag-value: map-get($cxDefaultFlags, $flag-name);
  }
  @return $flag-value;
}
