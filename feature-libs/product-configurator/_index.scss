@mixin cx-configurator-weight($weight: 'normal') {
  @if type-of($weight) != 'string' {
    font-weight: $weight;
  } @else {
    @if $weight == 'light' {
      font-weight: var(--cx-font-weight-light);
    } @else if $weight == 'semi' {
      font-weight: var(--cx-font-weight-semi);
    } @else if $weight == 'normal' or $weight == 'reg' {
      font-weight: var(--cx-font-weight-normal);
    } @else if $weight == 'bold' {
      font-weight: var(--cx-font-weight-bold);
    }
  }
}

@mixin cx-configurator-type($size: 'default', $weight: 'default') {
  $size_: $font-size-base;
  $weight_: $font-weight-normal;
  $lineheight_: $line-height-base;
  // $marginbottom_: $paragraph-margin-bottom;
  @if variable-exists(type) {
    $list: map-get($type, $size);
    //do size
    @if map-has-key($type, $size) {
      $size_: nth($list, 1);
      $weight_: nth($list, 2);
      $lineheight_: $headings-line-height;
      $marginbottom_: $headings-margin-bottom;
    }
    //check weight
    @if $weight != 'default' {
      $weight_: $weight;
    }
  } @else {
    @warn "Variable $type does not exist";
  }
  font-size: var(--cx-font-size, $size_);
  @include cx-configurator-weight($weight_);
  // removing margin as it is assigned per component
  //add line-height
  line-height: var(--cx-line-height, $lineheight_);
}

@mixin cx-configurator-visible-focus {
  outline-style: solid;
  outline-color: var(--cx-color-visual-focus);
  outline-width: var(--cx-visual-focus-width, 2px);
  outline-offset: 4px;
  transition: none;
}

@import './common/index';
@import './rulebased/index';
@import './textfield/index';
